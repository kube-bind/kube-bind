services:
  cert-generator:
    build:
      context: ./cert-generator
      dockerfile: Dockerfile
    volumes:
      - certs:/certs
    # Run the certificate generator once and exit
    entrypoint: ["./generate_certs.sh"]
    # Healthcheck to ensure certificates are generated
    healthcheck:
      test: ["CMD", "sh", "-c", "test -f /certs/dex.pem"]
      interval: 5s
      timeout: 2s
      retries: 10
    # Ensure it runs before Dex and KCP
    restart: "no"

  dex:
    build:
      context: ./dex
      dockerfile: Dockerfile
    ports:
      - "5556:5556"  # Exposes Dex on port 5556
    volumes:
      - ./dex/kcp-config.yaml:/dex/config/kcp-config.yaml:ro  # Mounts Dex config as read-only
      - certs:/certs:ro  # Mounts certificates as read-only
      - dex_data:/data  # Mounts Dex data directory for SQLite DB
    command: dex serve /dex/config/kcp-config.yaml
    depends_on:
      cert-generator:
        condition: service_healthy

  kcp:
    build:
      context: ./kcp
      dockerfile: Dockerfile
    ports:
      - "6443:6443"  # Exposes KCP on port 6443
    volumes:
      - certs:/certs:ro  # Mounts certificates as read-only
      - kcp_data:/app  # Mounts KCP data directory
    command: >
      kcp start
      --oidc-issuer-url=https://dex:5556/dex
      --oidc-client-id=kcp-dev
      --oidc-groups-claim=groups
      --oidc-ca-file=/certs/dex.pem
    depends_on:
      cert-generator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "-s", "-k", "https://localhost:6443/healthz"]
      interval: 5s
      timeout: 2s
      retries: 10
    # Ensure it runs before Dex and KCP
    restart: "no"

  kube-bind-init:
    build:
      context: ./../../../../
      dockerfile: ./contrib/example-backend-kcp/hack/docker-compose/kube-bind/Dockerfile
    image: kube-bind-image
    volumes:
      - certs:/certs:ro  # Mounts certificates as read-only
      - kcp_data:/kcp/config  # Mounts KCP configuration directory
    command: >
      kubebind-bootstrap init --kcp-kubeconfig=/kcp/config/.kcp/admin.kubeconfig
    depends_on:
      kcp:
        condition: service_healthy

  kube-bind:
    image: kube-bind-image
    ports:
      - "6444:6444"  # Exposes Kube-Bind on port 6444 (adjust as needed)
    volumes:
      - certs:/certs:ro  # Mounts certificates as read-only
      - kcp_data:/kcp/config  # Mounts KCP configuratiÃŸon directory
    command: >
      kubebind start
      -v 4
      --tls-cert-file=/certs/dex.pem
      --tls-key-file=/certs/dex.pem
      --listen-address=0.0.0.0:6444
      --oidc-issuer-client-secret=Z2Fyc2lha2FsYmlzdmFuZGVuekWplCg==
      --oidc-issuer-client-id=kcp-dev
      --oidc-issuer-url=https://dex:5556/dex
      --oidc-callback-url=https://localhost:6444/callback
      --oidc-authorize-url=https://localhost:6444/authorize
      --oidc-ca-file=/certs/dex.pem
      --pretty-name="CorpAAA.com"
      --namespace-prefix="kube-bind-"
      --cookie-signing-key=bGMHz7SR9XcI9JdDB68VmjQErrjbrAR9JdVqjAOKHzE=
      --cookie-encryption-key=wadqi4u+w0bqnSrVFtM38Pz2ykYVIeeadhzT34XlC1Y=
      --workspace-path="root:kube-bind"
      --apiexport-name="kube-bind.io"
      --kubeconfig=/kcp/config/.kcp/admin.kubeconfig
      --dev-mode
    depends_on:
      cert-generator:
        condition: service_healthy
      kcp:
        condition: service_healthy
      kube-bind-init:
        condition: service_completed_successfully

volumes:
  dex_data:
  certs:
  kcp_data:
  kube_bind_data:
