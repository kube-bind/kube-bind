/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/kube-bind/kube-bind/pkg/apis/kubebind/v1alpha1"
)

// ServiceBindingSessionLister helps list ServiceBindingSessions.
// All objects returned here must be treated as read-only.
type ServiceBindingSessionLister interface {
	// List lists all ServiceBindingSessions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceBindingSession, err error)
	// ServiceBindingSessions returns an object that can list and get ServiceBindingSessions.
	ServiceBindingSessions(namespace string) ServiceBindingSessionNamespaceLister
	ServiceBindingSessionListerExpansion
}

// serviceBindingSessionLister implements the ServiceBindingSessionLister interface.
type serviceBindingSessionLister struct {
	indexer cache.Indexer
}

// NewServiceBindingSessionLister returns a new ServiceBindingSessionLister.
func NewServiceBindingSessionLister(indexer cache.Indexer) ServiceBindingSessionLister {
	return &serviceBindingSessionLister{indexer: indexer}
}

// List lists all ServiceBindingSessions in the indexer.
func (s *serviceBindingSessionLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceBindingSession, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceBindingSession))
	})
	return ret, err
}

// ServiceBindingSessions returns an object that can list and get ServiceBindingSessions.
func (s *serviceBindingSessionLister) ServiceBindingSessions(namespace string) ServiceBindingSessionNamespaceLister {
	return serviceBindingSessionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceBindingSessionNamespaceLister helps list and get ServiceBindingSessions.
// All objects returned here must be treated as read-only.
type ServiceBindingSessionNamespaceLister interface {
	// List lists all ServiceBindingSessions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceBindingSession, err error)
	// Get retrieves the ServiceBindingSession from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceBindingSession, error)
	ServiceBindingSessionNamespaceListerExpansion
}

// serviceBindingSessionNamespaceLister implements the ServiceBindingSessionNamespaceLister
// interface.
type serviceBindingSessionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceBindingSessions in the indexer for a given namespace.
func (s serviceBindingSessionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceBindingSession, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceBindingSession))
	})
	return ret, err
}

// Get retrieves the ServiceBindingSession from the indexer for a given namespace and name.
func (s serviceBindingSessionNamespaceLister) Get(name string) (*v1alpha1.ServiceBindingSession, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicebindingsession"), name)
	}
	return obj.(*v1alpha1.ServiceBindingSession), nil
}
