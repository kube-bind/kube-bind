/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	apiskubebindv1alpha1 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha1"
	versioned "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	internalinterfaces "github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
	kubebindv1alpha1 "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha1"
)

// APIServiceBindingClusterInformer provides access to a shared informer and lister for
// APIServiceBindings.
type APIServiceBindingClusterInformer interface {
	Cluster(logicalcluster.Name) APIServiceBindingInformer
	ClusterWithContext(context.Context, logicalcluster.Name) APIServiceBindingInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha1.APIServiceBindingClusterLister
}

type aPIServiceBindingClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIServiceBindingClusterInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceBindingClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceBindingClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceBindingClusterInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceBindingClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha1.APIServiceBinding{},
		resyncPeriod,
		indexers,
	)
}

func (i *aPIServiceBindingClusterInformer) defaultInformer(client versioned.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceBindingClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *aPIServiceBindingClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha1.APIServiceBinding{}, i.defaultInformer)
}

func (i *aPIServiceBindingClusterInformer) Lister() kubebindv1alpha1.APIServiceBindingClusterLister {
	return kubebindv1alpha1.NewAPIServiceBindingClusterLister(i.Informer().GetIndexer())
}

func (i *aPIServiceBindingClusterInformer) Cluster(clusterName logicalcluster.Name) APIServiceBindingInformer {
	return &aPIServiceBindingInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *aPIServiceBindingClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) APIServiceBindingInformer {
	return &aPIServiceBindingInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type aPIServiceBindingInformer struct {
	informer cache.SharedIndexInformer
	lister   kubebindv1alpha1.APIServiceBindingLister
}

func (i *aPIServiceBindingInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *aPIServiceBindingInformer) Lister() kubebindv1alpha1.APIServiceBindingLister {
	return i.lister
}

// APIServiceBindingInformer provides access to a shared informer and lister for
// APIServiceBindings.
type APIServiceBindingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha1.APIServiceBindingLister
}

type aPIServiceBindingScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIServiceBindingInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceBindingInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIServiceBindingInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceBindingInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceBindingInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha1.APIServiceBinding{},
		resyncPeriod,
		indexers,
	)
}

func (i *aPIServiceBindingScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha1.APIServiceBinding{}, i.defaultInformer)
}

func (i *aPIServiceBindingScopedInformer) Lister() kubebindv1alpha1.APIServiceBindingLister {
	return kubebindv1alpha1.NewAPIServiceBindingLister(i.Informer().GetIndexer())
}

func (i *aPIServiceBindingScopedInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIServiceBindingInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
