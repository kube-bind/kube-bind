//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha1 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha1"
	scopedclientset "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	clientset "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned/cluster"
	"github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
	kubebindv1alpha1listers "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha1"
)

// APIServiceBindingClusterInformer provides access to a shared informer and lister for
// APIServiceBindings.
type APIServiceBindingClusterInformer interface {
	Cluster(logicalcluster.Name) APIServiceBindingInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha1listers.APIServiceBindingClusterLister
}

type aPIServiceBindingClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIServiceBindingClusterInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceBindingClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceBindingClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceBindingClusterInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceBindingClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().Watch(context.TODO(), options)
			},
		},
		&kubebindv1alpha1.APIServiceBinding{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIServiceBindingClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceBindingClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *aPIServiceBindingClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&kubebindv1alpha1.APIServiceBinding{}, f.defaultInformer)
}

func (f *aPIServiceBindingClusterInformer) Lister() kubebindv1alpha1listers.APIServiceBindingClusterLister {
	return kubebindv1alpha1listers.NewAPIServiceBindingClusterLister(f.Informer().GetIndexer())
}

// APIServiceBindingInformer provides access to a shared informer and lister for
// APIServiceBindings.
type APIServiceBindingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha1listers.APIServiceBindingLister
}

func (f *aPIServiceBindingClusterInformer) Cluster(clusterName logicalcluster.Name) APIServiceBindingInformer {
	return &aPIServiceBindingInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type aPIServiceBindingInformer struct {
	informer cache.SharedIndexInformer
	lister   kubebindv1alpha1listers.APIServiceBindingLister
}

func (f *aPIServiceBindingInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *aPIServiceBindingInformer) Lister() kubebindv1alpha1listers.APIServiceBindingLister {
	return f.lister
}

type aPIServiceBindingScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *aPIServiceBindingScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kubebindv1alpha1.APIServiceBinding{}, f.defaultInformer)
}

func (f *aPIServiceBindingScopedInformer) Lister() kubebindv1alpha1listers.APIServiceBindingLister {
	return kubebindv1alpha1listers.NewAPIServiceBindingLister(f.Informer().GetIndexer())
}

// NewAPIServiceBindingInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceBindingInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIServiceBindingInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceBindingInformer constructs a new informer for APIServiceBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceBindingInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().APIServiceBindings().Watch(context.TODO(), options)
			},
		},
		&kubebindv1alpha1.APIServiceBinding{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIServiceBindingScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIServiceBindingInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
