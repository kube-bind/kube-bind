//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha1 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha1"
	scopedclientset "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	clientset "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned/cluster"
	"github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
	kubebindv1alpha1listers "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha1"
)

// ClusterBindingClusterInformer provides access to a shared informer and lister for
// ClusterBindings.
type ClusterBindingClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterBindingInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha1listers.ClusterBindingClusterLister
}

type clusterBindingClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterBindingClusterInformer constructs a new informer for ClusterBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterBindingClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterBindingClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterBindingClusterInformer constructs a new informer for ClusterBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterBindingClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().ClusterBindings().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().ClusterBindings().Watch(context.TODO(), options)
			},
		},
		&kubebindv1alpha1.ClusterBinding{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterBindingClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterBindingClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc},
		f.tweakListOptions,
	)
}

func (f *clusterBindingClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&kubebindv1alpha1.ClusterBinding{}, f.defaultInformer)
}

func (f *clusterBindingClusterInformer) Lister() kubebindv1alpha1listers.ClusterBindingClusterLister {
	return kubebindv1alpha1listers.NewClusterBindingClusterLister(f.Informer().GetIndexer())
}

// ClusterBindingInformer provides access to a shared informer and lister for
// ClusterBindings.
type ClusterBindingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha1listers.ClusterBindingLister
}

func (f *clusterBindingClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterBindingInformer {
	return &clusterBindingInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterBindingInformer struct {
	informer cache.SharedIndexInformer
	lister   kubebindv1alpha1listers.ClusterBindingLister
}

func (f *clusterBindingInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterBindingInformer) Lister() kubebindv1alpha1listers.ClusterBindingLister {
	return f.lister
}

type clusterBindingScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

func (f *clusterBindingScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kubebindv1alpha1.ClusterBinding{}, f.defaultInformer)
}

func (f *clusterBindingScopedInformer) Lister() kubebindv1alpha1listers.ClusterBindingLister {
	return kubebindv1alpha1listers.NewClusterBindingLister(f.Informer().GetIndexer())
}

// NewClusterBindingInformer constructs a new informer for ClusterBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterBindingInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterBindingInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredClusterBindingInformer constructs a new informer for ClusterBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterBindingInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().ClusterBindings(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha1().ClusterBindings(namespace).Watch(context.TODO(), options)
			},
		},
		&kubebindv1alpha1.ClusterBinding{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterBindingScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterBindingInformer(client, resyncPeriod, f.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}
