/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha2

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	apiskubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
	versioned "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	internalinterfaces "github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha2"
)

// APIServiceExportRequestClusterInformer provides access to a shared informer and lister for
// APIServiceExportRequests.
type APIServiceExportRequestClusterInformer interface {
	Cluster(logicalcluster.Name) APIServiceExportRequestInformer
	ClusterWithContext(context.Context, logicalcluster.Name) APIServiceExportRequestInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha2.APIServiceExportRequestClusterLister
}

type aPIServiceExportRequestClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIServiceExportRequestClusterInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceExportRequestClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceExportRequestClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceExportRequestClusterInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceExportRequestClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests().Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha2.APIServiceExportRequest{},
		resyncPeriod,
		indexers,
	)
}

func (i *aPIServiceExportRequestClusterInformer) defaultInformer(client versioned.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceExportRequestClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *aPIServiceExportRequestClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha2.APIServiceExportRequest{}, i.defaultInformer)
}

func (i *aPIServiceExportRequestClusterInformer) Lister() kubebindv1alpha2.APIServiceExportRequestClusterLister {
	return kubebindv1alpha2.NewAPIServiceExportRequestClusterLister(i.Informer().GetIndexer())
}

func (i *aPIServiceExportRequestClusterInformer) Cluster(clusterName logicalcluster.Name) APIServiceExportRequestInformer {
	return &aPIServiceExportRequestInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *aPIServiceExportRequestClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) APIServiceExportRequestInformer {
	return &aPIServiceExportRequestInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type aPIServiceExportRequestInformer struct {
	informer cache.SharedIndexInformer
	lister   kubebindv1alpha2.APIServiceExportRequestLister
}

func (i *aPIServiceExportRequestInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *aPIServiceExportRequestInformer) Lister() kubebindv1alpha2.APIServiceExportRequestLister {
	return i.lister
}

// APIServiceExportRequestInformer provides access to a shared informer and lister for
// APIServiceExportRequests.
type APIServiceExportRequestInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha2.APIServiceExportRequestLister
}

type aPIServiceExportRequestScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewAPIServiceExportRequestInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceExportRequestInformer(client versioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIServiceExportRequestInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredAPIServiceExportRequestInformer constructs a new informer for APIServiceExportRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceExportRequestInformer(client versioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests(namespace).List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceExportRequests(namespace).Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha2.APIServiceExportRequest{},
		resyncPeriod,
		indexers,
	)
}

func (i *aPIServiceExportRequestScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha2.APIServiceExportRequest{}, i.defaultInformer)
}

func (i *aPIServiceExportRequestScopedInformer) Lister() kubebindv1alpha2.APIServiceExportRequestLister {
	return kubebindv1alpha2.NewAPIServiceExportRequestLister(i.Informer().GetIndexer())
}

func (i *aPIServiceExportRequestScopedInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIServiceExportRequestInformer(client, resyncPeriod, i.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, i.tweakListOptions)
}
