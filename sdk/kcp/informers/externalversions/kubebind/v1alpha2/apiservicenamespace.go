/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha2

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	apiskubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
	versioned "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	internalinterfaces "github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha2"
)

// APIServiceNamespaceClusterInformer provides access to a shared informer and lister for
// APIServiceNamespaces.
type APIServiceNamespaceClusterInformer interface {
	Cluster(logicalcluster.Name) APIServiceNamespaceInformer
	ClusterWithContext(context.Context, logicalcluster.Name) APIServiceNamespaceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha2.APIServiceNamespaceClusterLister
}

type aPIServiceNamespaceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIServiceNamespaceClusterInformer constructs a new informer for APIServiceNamespace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceNamespaceClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceNamespaceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIServiceNamespaceClusterInformer constructs a new informer for APIServiceNamespace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceNamespaceClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceNamespaces().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceNamespaces().Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha2.APIServiceNamespace{},
		resyncPeriod,
		indexers,
	)
}

func (i *aPIServiceNamespaceClusterInformer) defaultInformer(client versioned.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIServiceNamespaceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *aPIServiceNamespaceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha2.APIServiceNamespace{}, i.defaultInformer)
}

func (i *aPIServiceNamespaceClusterInformer) Lister() kubebindv1alpha2.APIServiceNamespaceClusterLister {
	return kubebindv1alpha2.NewAPIServiceNamespaceClusterLister(i.Informer().GetIndexer())
}

func (i *aPIServiceNamespaceClusterInformer) Cluster(clusterName logicalcluster.Name) APIServiceNamespaceInformer {
	return &aPIServiceNamespaceInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *aPIServiceNamespaceClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) APIServiceNamespaceInformer {
	return &aPIServiceNamespaceInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type aPIServiceNamespaceInformer struct {
	informer cache.SharedIndexInformer
	lister   kubebindv1alpha2.APIServiceNamespaceLister
}

func (i *aPIServiceNamespaceInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *aPIServiceNamespaceInformer) Lister() kubebindv1alpha2.APIServiceNamespaceLister {
	return i.lister
}

// APIServiceNamespaceInformer provides access to a shared informer and lister for
// APIServiceNamespaces.
type APIServiceNamespaceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha2.APIServiceNamespaceLister
}

type aPIServiceNamespaceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewAPIServiceNamespaceInformer constructs a new informer for APIServiceNamespace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIServiceNamespaceInformer(client versioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIServiceNamespaceInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredAPIServiceNamespaceInformer constructs a new informer for APIServiceNamespace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIServiceNamespaceInformer(client versioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceNamespaces(namespace).List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().APIServiceNamespaces(namespace).Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha2.APIServiceNamespace{},
		resyncPeriod,
		indexers,
	)
}

func (i *aPIServiceNamespaceScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha2.APIServiceNamespace{}, i.defaultInformer)
}

func (i *aPIServiceNamespaceScopedInformer) Lister() kubebindv1alpha2.APIServiceNamespaceLister {
	return kubebindv1alpha2.NewAPIServiceNamespaceLister(i.Informer().GetIndexer())
}

func (i *aPIServiceNamespaceScopedInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIServiceNamespaceInformer(client, resyncPeriod, i.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, i.tweakListOptions)
}
