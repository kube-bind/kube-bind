/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha2

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	apiskubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
	versioned "github.com/kube-bind/kube-bind/sdk/kcp/clientset/versioned"
	internalinterfaces "github.com/kube-bind/kube-bind/sdk/kcp/informers/externalversions/internalinterfaces"
	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/kcp/listers/kubebind/v1alpha2"
)

// BoundAPIResourceSchemaClusterInformer provides access to a shared informer and lister for
// BoundAPIResourceSchemas.
type BoundAPIResourceSchemaClusterInformer interface {
	Cluster(logicalcluster.Name) BoundAPIResourceSchemaInformer
	ClusterWithContext(context.Context, logicalcluster.Name) BoundAPIResourceSchemaInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kubebindv1alpha2.BoundAPIResourceSchemaClusterLister
}

type boundAPIResourceSchemaClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewBoundAPIResourceSchemaClusterInformer constructs a new informer for BoundAPIResourceSchema type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBoundAPIResourceSchemaClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredBoundAPIResourceSchemaClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredBoundAPIResourceSchemaClusterInformer constructs a new informer for BoundAPIResourceSchema type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredBoundAPIResourceSchemaClusterInformer(client versioned.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().BoundAPIResourceSchemas().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().BoundAPIResourceSchemas().Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha2.BoundAPIResourceSchema{},
		resyncPeriod,
		indexers,
	)
}

func (i *boundAPIResourceSchemaClusterInformer) defaultInformer(client versioned.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredBoundAPIResourceSchemaClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *boundAPIResourceSchemaClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha2.BoundAPIResourceSchema{}, i.defaultInformer)
}

func (i *boundAPIResourceSchemaClusterInformer) Lister() kubebindv1alpha2.BoundAPIResourceSchemaClusterLister {
	return kubebindv1alpha2.NewBoundAPIResourceSchemaClusterLister(i.Informer().GetIndexer())
}

func (i *boundAPIResourceSchemaClusterInformer) Cluster(clusterName logicalcluster.Name) BoundAPIResourceSchemaInformer {
	return &boundAPIResourceSchemaInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *boundAPIResourceSchemaClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) BoundAPIResourceSchemaInformer {
	return &boundAPIResourceSchemaInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type boundAPIResourceSchemaInformer struct {
	informer cache.SharedIndexInformer
	lister   kubebindv1alpha2.BoundAPIResourceSchemaLister
}

func (i *boundAPIResourceSchemaInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *boundAPIResourceSchemaInformer) Lister() kubebindv1alpha2.BoundAPIResourceSchemaLister {
	return i.lister
}

// BoundAPIResourceSchemaInformer provides access to a shared informer and lister for
// BoundAPIResourceSchemas.
type BoundAPIResourceSchemaInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kubebindv1alpha2.BoundAPIResourceSchemaLister
}

type boundAPIResourceSchemaScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewBoundAPIResourceSchemaInformer constructs a new informer for BoundAPIResourceSchema type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBoundAPIResourceSchemaInformer(client versioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredBoundAPIResourceSchemaInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredBoundAPIResourceSchemaInformer constructs a new informer for BoundAPIResourceSchema type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredBoundAPIResourceSchemaInformer(client versioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().BoundAPIResourceSchemas(namespace).List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubeBindV1alpha2().BoundAPIResourceSchemas(namespace).Watch(context.Background(), options)
			},
		},
		&apiskubebindv1alpha2.BoundAPIResourceSchema{},
		resyncPeriod,
		indexers,
	)
}

func (i *boundAPIResourceSchemaScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&apiskubebindv1alpha2.BoundAPIResourceSchema{}, i.defaultInformer)
}

func (i *boundAPIResourceSchemaScopedInformer) Lister() kubebindv1alpha2.BoundAPIResourceSchemaLister {
	return kubebindv1alpha2.NewBoundAPIResourceSchemaLister(i.Informer().GetIndexer())
}

func (i *boundAPIResourceSchemaScopedInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredBoundAPIResourceSchemaInformer(client, resyncPeriod, i.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, i.tweakListOptions)
}
