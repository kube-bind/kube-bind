//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha1 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha1"
)

// APIServiceNamespaceClusterLister can list APIServiceNamespaces across all workspaces, or scope down to a APIServiceNamespaceLister for one workspace.
// All objects returned here must be treated as read-only.
type APIServiceNamespaceClusterLister interface {
	// List lists all APIServiceNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error)
	// Cluster returns a lister that can list and get APIServiceNamespaces in one workspace.
	Cluster(clusterName logicalcluster.Name) APIServiceNamespaceLister
	APIServiceNamespaceClusterListerExpansion
}

type aPIServiceNamespaceClusterLister struct {
	indexer cache.Indexer
}

// NewAPIServiceNamespaceClusterLister returns a new APIServiceNamespaceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewAPIServiceNamespaceClusterLister(indexer cache.Indexer) *aPIServiceNamespaceClusterLister {
	return &aPIServiceNamespaceClusterLister{indexer: indexer}
}

// List lists all APIServiceNamespaces in the indexer across all workspaces.
func (s *aPIServiceNamespaceClusterLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*kubebindv1alpha1.APIServiceNamespace))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get APIServiceNamespaces.
func (s *aPIServiceNamespaceClusterLister) Cluster(clusterName logicalcluster.Name) APIServiceNamespaceLister {
	return &aPIServiceNamespaceLister{indexer: s.indexer, clusterName: clusterName}
}

// APIServiceNamespaceLister can list APIServiceNamespaces across all namespaces, or scope down to a APIServiceNamespaceNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type APIServiceNamespaceLister interface {
	// List lists all APIServiceNamespaces in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error)
	// APIServiceNamespaces returns a lister that can list and get APIServiceNamespaces in one workspace and namespace.
	APIServiceNamespaces(namespace string) APIServiceNamespaceNamespaceLister
	APIServiceNamespaceListerExpansion
}

// aPIServiceNamespaceLister can list all APIServiceNamespaces inside a workspace or scope down to a APIServiceNamespaceLister for one namespace.
type aPIServiceNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all APIServiceNamespaces in the indexer for a workspace.
func (s *aPIServiceNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.APIServiceNamespace))
	})
	return ret, err
}

// APIServiceNamespaces returns an object that can list and get APIServiceNamespaces in one namespace.
func (s *aPIServiceNamespaceLister) APIServiceNamespaces(namespace string) APIServiceNamespaceNamespaceLister {
	return &aPIServiceNamespaceNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// aPIServiceNamespaceNamespaceLister helps list and get APIServiceNamespaces.
// All objects returned here must be treated as read-only.
type APIServiceNamespaceNamespaceLister interface {
	// List lists all APIServiceNamespaces in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error)
	// Get retrieves the APIServiceNamespace from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kubebindv1alpha1.APIServiceNamespace, error)
	APIServiceNamespaceNamespaceListerExpansion
}

// aPIServiceNamespaceNamespaceLister helps list and get APIServiceNamespaces.
// All objects returned here must be treated as read-only.
type aPIServiceNamespaceNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all APIServiceNamespaces in the indexer for a given workspace and namespace.
func (s *aPIServiceNamespaceNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.APIServiceNamespace))
	})
	return ret, err
}

// Get retrieves the APIServiceNamespace from the indexer for a given workspace, namespace and name.
func (s *aPIServiceNamespaceNamespaceLister) Get(name string) (*kubebindv1alpha1.APIServiceNamespace, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha1.Resource("apiservicenamespaces"), name)
	}
	return obj.(*kubebindv1alpha1.APIServiceNamespace), nil
}

// NewAPIServiceNamespaceLister returns a new APIServiceNamespaceLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewAPIServiceNamespaceLister(indexer cache.Indexer) *aPIServiceNamespaceScopedLister {
	return &aPIServiceNamespaceScopedLister{indexer: indexer}
}

// aPIServiceNamespaceScopedLister can list all APIServiceNamespaces inside a workspace or scope down to a APIServiceNamespaceLister for one namespace.
type aPIServiceNamespaceScopedLister struct {
	indexer cache.Indexer
}

// List lists all APIServiceNamespaces in the indexer for a workspace.
func (s *aPIServiceNamespaceScopedLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.APIServiceNamespace))
	})
	return ret, err
}

// APIServiceNamespaces returns an object that can list and get APIServiceNamespaces in one namespace.
func (s *aPIServiceNamespaceScopedLister) APIServiceNamespaces(namespace string) APIServiceNamespaceNamespaceLister {
	return &aPIServiceNamespaceScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// aPIServiceNamespaceScopedNamespaceLister helps list and get APIServiceNamespaces.
type aPIServiceNamespaceScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all APIServiceNamespaces in the indexer for a given workspace and namespace.
func (s *aPIServiceNamespaceScopedNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.APIServiceNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.APIServiceNamespace))
	})
	return ret, err
}

// Get retrieves the APIServiceNamespace from the indexer for a given workspace, namespace and name.
func (s *aPIServiceNamespaceScopedNamespaceLister) Get(name string) (*kubebindv1alpha1.APIServiceNamespace, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha1.Resource("apiservicenamespaces"), name)
	}
	return obj.(*kubebindv1alpha1.APIServiceNamespace), nil
}
