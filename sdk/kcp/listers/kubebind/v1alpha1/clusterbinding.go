//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha1 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha1"
)

// ClusterBindingClusterLister can list ClusterBindings across all workspaces, or scope down to a ClusterBindingLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterBindingClusterLister interface {
	// List lists all ClusterBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error)
	// Cluster returns a lister that can list and get ClusterBindings in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterBindingLister
	ClusterBindingClusterListerExpansion
}

type clusterBindingClusterLister struct {
	indexer cache.Indexer
}

// NewClusterBindingClusterLister returns a new ClusterBindingClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewClusterBindingClusterLister(indexer cache.Indexer) *clusterBindingClusterLister {
	return &clusterBindingClusterLister{indexer: indexer}
}

// List lists all ClusterBindings in the indexer across all workspaces.
func (s *clusterBindingClusterLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*kubebindv1alpha1.ClusterBinding))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterBindings.
func (s *clusterBindingClusterLister) Cluster(clusterName logicalcluster.Name) ClusterBindingLister {
	return &clusterBindingLister{indexer: s.indexer, clusterName: clusterName}
}

// ClusterBindingLister can list ClusterBindings across all namespaces, or scope down to a ClusterBindingNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type ClusterBindingLister interface {
	// List lists all ClusterBindings in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error)
	// ClusterBindings returns a lister that can list and get ClusterBindings in one workspace and namespace.
	ClusterBindings(namespace string) ClusterBindingNamespaceLister
	ClusterBindingListerExpansion
}

// clusterBindingLister can list all ClusterBindings inside a workspace or scope down to a ClusterBindingLister for one namespace.
type clusterBindingLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ClusterBindings in the indexer for a workspace.
func (s *clusterBindingLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.ClusterBinding))
	})
	return ret, err
}

// ClusterBindings returns an object that can list and get ClusterBindings in one namespace.
func (s *clusterBindingLister) ClusterBindings(namespace string) ClusterBindingNamespaceLister {
	return &clusterBindingNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// clusterBindingNamespaceLister helps list and get ClusterBindings.
// All objects returned here must be treated as read-only.
type ClusterBindingNamespaceLister interface {
	// List lists all ClusterBindings in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error)
	// Get retrieves the ClusterBinding from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kubebindv1alpha1.ClusterBinding, error)
	ClusterBindingNamespaceListerExpansion
}

// clusterBindingNamespaceLister helps list and get ClusterBindings.
// All objects returned here must be treated as read-only.
type clusterBindingNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all ClusterBindings in the indexer for a given workspace and namespace.
func (s *clusterBindingNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.ClusterBinding))
	})
	return ret, err
}

// Get retrieves the ClusterBinding from the indexer for a given workspace, namespace and name.
func (s *clusterBindingNamespaceLister) Get(name string) (*kubebindv1alpha1.ClusterBinding, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha1.Resource("clusterbindings"), name)
	}
	return obj.(*kubebindv1alpha1.ClusterBinding), nil
}

// NewClusterBindingLister returns a new ClusterBindingLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewClusterBindingLister(indexer cache.Indexer) *clusterBindingScopedLister {
	return &clusterBindingScopedLister{indexer: indexer}
}

// clusterBindingScopedLister can list all ClusterBindings inside a workspace or scope down to a ClusterBindingLister for one namespace.
type clusterBindingScopedLister struct {
	indexer cache.Indexer
}

// List lists all ClusterBindings in the indexer for a workspace.
func (s *clusterBindingScopedLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.ClusterBinding))
	})
	return ret, err
}

// ClusterBindings returns an object that can list and get ClusterBindings in one namespace.
func (s *clusterBindingScopedLister) ClusterBindings(namespace string) ClusterBindingNamespaceLister {
	return &clusterBindingScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// clusterBindingScopedNamespaceLister helps list and get ClusterBindings.
type clusterBindingScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterBindings in the indexer for a given workspace and namespace.
func (s *clusterBindingScopedNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha1.ClusterBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha1.ClusterBinding))
	})
	return ret, err
}

// Get retrieves the ClusterBinding from the indexer for a given workspace, namespace and name.
func (s *clusterBindingScopedNamespaceLister) Get(name string) (*kubebindv1alpha1.ClusterBinding, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha1.Resource("clusterbindings"), name)
	}
	return obj.(*kubebindv1alpha1.ClusterBinding), nil
}
