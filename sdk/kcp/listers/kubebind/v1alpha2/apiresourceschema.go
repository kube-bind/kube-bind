//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha2

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
)

// APIResourceSchemaClusterLister can list APIResourceSchemas across all workspaces, or scope down to a APIResourceSchemaLister for one workspace.
// All objects returned here must be treated as read-only.
type APIResourceSchemaClusterLister interface {
	// List lists all APIResourceSchemas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error)
	// Cluster returns a lister that can list and get APIResourceSchemas in one workspace.
	Cluster(clusterName logicalcluster.Name) APIResourceSchemaLister
	APIResourceSchemaClusterListerExpansion
}

type aPIResourceSchemaClusterLister struct {
	indexer cache.Indexer
}

// NewAPIResourceSchemaClusterLister returns a new APIResourceSchemaClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewAPIResourceSchemaClusterLister(indexer cache.Indexer) *aPIResourceSchemaClusterLister {
	return &aPIResourceSchemaClusterLister{indexer: indexer}
}

// List lists all APIResourceSchemas in the indexer across all workspaces.
func (s *aPIResourceSchemaClusterLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*kubebindv1alpha2.APIResourceSchema))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get APIResourceSchemas.
func (s *aPIResourceSchemaClusterLister) Cluster(clusterName logicalcluster.Name) APIResourceSchemaLister {
	return &aPIResourceSchemaLister{indexer: s.indexer, clusterName: clusterName}
}

// APIResourceSchemaLister can list APIResourceSchemas across all namespaces, or scope down to a APIResourceSchemaNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type APIResourceSchemaLister interface {
	// List lists all APIResourceSchemas in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error)
	// APIResourceSchemas returns a lister that can list and get APIResourceSchemas in one workspace and namespace.
	APIResourceSchemas(namespace string) APIResourceSchemaNamespaceLister
	APIResourceSchemaListerExpansion
}

// aPIResourceSchemaLister can list all APIResourceSchemas inside a workspace or scope down to a APIResourceSchemaLister for one namespace.
type aPIResourceSchemaLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all APIResourceSchemas in the indexer for a workspace.
func (s *aPIResourceSchemaLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.APIResourceSchema))
	})
	return ret, err
}

// APIResourceSchemas returns an object that can list and get APIResourceSchemas in one namespace.
func (s *aPIResourceSchemaLister) APIResourceSchemas(namespace string) APIResourceSchemaNamespaceLister {
	return &aPIResourceSchemaNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// aPIResourceSchemaNamespaceLister helps list and get APIResourceSchemas.
// All objects returned here must be treated as read-only.
type APIResourceSchemaNamespaceLister interface {
	// List lists all APIResourceSchemas in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error)
	// Get retrieves the APIResourceSchema from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kubebindv1alpha2.APIResourceSchema, error)
	APIResourceSchemaNamespaceListerExpansion
}

// aPIResourceSchemaNamespaceLister helps list and get APIResourceSchemas.
// All objects returned here must be treated as read-only.
type aPIResourceSchemaNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all APIResourceSchemas in the indexer for a given workspace and namespace.
func (s *aPIResourceSchemaNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.APIResourceSchema))
	})
	return ret, err
}

// Get retrieves the APIResourceSchema from the indexer for a given workspace, namespace and name.
func (s *aPIResourceSchemaNamespaceLister) Get(name string) (*kubebindv1alpha2.APIResourceSchema, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha2.Resource("apiresourceschemas"), name)
	}
	return obj.(*kubebindv1alpha2.APIResourceSchema), nil
}

// NewAPIResourceSchemaLister returns a new APIResourceSchemaLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewAPIResourceSchemaLister(indexer cache.Indexer) *aPIResourceSchemaScopedLister {
	return &aPIResourceSchemaScopedLister{indexer: indexer}
}

// aPIResourceSchemaScopedLister can list all APIResourceSchemas inside a workspace or scope down to a APIResourceSchemaLister for one namespace.
type aPIResourceSchemaScopedLister struct {
	indexer cache.Indexer
}

// List lists all APIResourceSchemas in the indexer for a workspace.
func (s *aPIResourceSchemaScopedLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.APIResourceSchema))
	})
	return ret, err
}

// APIResourceSchemas returns an object that can list and get APIResourceSchemas in one namespace.
func (s *aPIResourceSchemaScopedLister) APIResourceSchemas(namespace string) APIResourceSchemaNamespaceLister {
	return &aPIResourceSchemaScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// aPIResourceSchemaScopedNamespaceLister helps list and get APIResourceSchemas.
type aPIResourceSchemaScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all APIResourceSchemas in the indexer for a given workspace and namespace.
func (s *aPIResourceSchemaScopedNamespaceLister) List(selector labels.Selector) (ret []*kubebindv1alpha2.APIResourceSchema, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*kubebindv1alpha2.APIResourceSchema))
	})
	return ret, err
}

// Get retrieves the APIResourceSchema from the indexer for a given workspace, namespace and name.
func (s *aPIResourceSchemaScopedNamespaceLister) Get(name string) (*kubebindv1alpha2.APIResourceSchema, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kubebindv1alpha2.Resource("apiresourceschemas"), name)
	}
	return obj.(*kubebindv1alpha2.APIResourceSchema), nil
}
