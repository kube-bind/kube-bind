/*
Copyright The Kube Bind Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha2

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kubebindv1alpha2 "github.com/kube-bind/kube-bind/sdk/apis/kubebind/v1alpha2"
)

// ClusterBindingClusterLister helps list ClusterBindings across all workspaces,
// or scope down to a ClusterBindingLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterBindingClusterLister interface {
	// List lists all ClusterBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.ClusterBinding, err error)
	// Cluster returns a lister that can list and get ClusterBindings in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterBindingLister
	ClusterBindingClusterListerExpansion
}

// clusterBindingClusterLister implements the ClusterBindingClusterLister interface.
type clusterBindingClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kubebindv1alpha2.ClusterBinding]
}

var _ ClusterBindingClusterLister = new(clusterBindingClusterLister)

// NewClusterBindingClusterLister returns a new ClusterBindingClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewClusterBindingClusterLister(indexer cache.Indexer) ClusterBindingClusterLister {
	return &clusterBindingClusterLister{
		kcplisters.NewCluster[*kubebindv1alpha2.ClusterBinding](indexer, kubebindv1alpha2.Resource("clusterbinding")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterBindings.
func (l *clusterBindingClusterLister) Cluster(clusterName logicalcluster.Name) ClusterBindingLister {
	return &clusterBindingLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// clusterBindingLister can list all ClusterBindings inside a workspace
// or scope down to a ClusterBindingNamespaceLister for one namespace.
type clusterBindingLister struct {
	kcplisters.ResourceIndexer[*kubebindv1alpha2.ClusterBinding]
}

var _ ClusterBindingLister = new(clusterBindingLister)

// ClusterBindingLister can list ClusterBindings across all namespaces, or scope down to a ClusterBindingNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type ClusterBindingLister interface {
	// List lists all ClusterBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.ClusterBinding, err error)
	// ClusterBindings returns a lister that can list and get ClusterBindings in one workspace and namespace.
	ClusterBindings(namespace string) ClusterBindingNamespaceLister
	ClusterBindingListerExpansion
}

// ClusterBindings returns an object that can list and get ClusterBindings in one namespace.
func (l *clusterBindingLister) ClusterBindings(namespace string) ClusterBindingNamespaceLister {
	return &clusterBindingNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// clusterBindingNamespaceLister implements the ClusterBindingNamespaceLister
// interface.
type clusterBindingNamespaceLister struct {
	kcplisters.ResourceIndexer[*kubebindv1alpha2.ClusterBinding]
}

var _ ClusterBindingNamespaceLister = new(clusterBindingNamespaceLister)

// ClusterBindingNamespaceLister can list all ClusterBindings, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterBindingNamespaceLister interface {
	// List lists all ClusterBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kubebindv1alpha2.ClusterBinding, err error)
	// Get retrieves the ClusterBinding from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kubebindv1alpha2.ClusterBinding, error)
	ClusterBindingNamespaceListerExpansion
}

// NewClusterBindingLister returns a new ClusterBindingLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewClusterBindingLister(indexer cache.Indexer) ClusterBindingLister {
	return &clusterBindingLister{
		kcplisters.New[*kubebindv1alpha2.ClusterBinding](indexer, kubebindv1alpha2.Resource("clusterbinding")),
	}
}

// clusterBindingScopedLister can list all ClusterBindings inside a workspace
// or scope down to a ClusterBindingNamespaceLister for one namespace.
type clusterBindingScopedLister struct {
	kcplisters.ResourceIndexer[*kubebindv1alpha2.ClusterBinding]
}

// ClusterBindings returns an object that can list and get ClusterBindings in one namespace.
func (l *clusterBindingScopedLister) ClusterBindings(namespace string) ClusterBindingLister {
	return &clusterBindingLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
